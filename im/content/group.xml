<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Instantbird messenging client, released
   - 2007.
   -
   - The Initial Developer of the Original Code is
   - Florian QUEZE <florian@instantbird.org>.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % instantbirdDTD SYSTEM "chrome://instantbird/locale/instantbird.dtd" >
  %instantbirdDTD;
]>

<bindings id="groupBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="group" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
    <content persist="closed">
      <xul:image class="twisty"/>
      <xul:label flex="1" crop="end" xbl:inherits="value=name"/>
      <xul:button anonid="hideGroupButton" class="hideGroupButton"
                  tooltiptext="&hideGroupTooltip;"/>
    </content>
    <implementation implements="nsIObserver">

     <destructor>
      <![CDATA[
        if (this.tag) {
          this.tag.removeObserver(this);
          delete this.tag;
        }
      ]]>
     </destructor>

     <!-- delay between each frame of the animation, in milliseconds -->
     <field name="animationInterval">20</field>

     <method name="build">
      <parameter name="aGroup"/>
      <body>
      <![CDATA[
        this.tag = aGroup;
        let contacts = this.tag.getContacts();
        if (!this.showOffline)
          contacts = contacts.filter((function (c) c.online), this);
        if (!contacts.length)
          return false;

        this.groupId = aGroup.id;
        this.contacts = [ ];
        this.contactsById = {};
        this.setAttribute("id", "group" + this.groupId);

        // restore the potential persisted value
        var source = Components.classes["@mozilla.org/rdf/datasource;1?name=local-store"]
                               .getService(Components.interfaces.nsIRDFDataSource);
        var RDF = Components.classes["@mozilla.org/rdf/rdf-service;1"]
                            .getService(Components.interfaces.nsIRDFService);
        var elt = RDF.GetResource(document.location + "#" + this.id);
        if (source.HasAssertion(elt, RDF.GetResource("closed"),
                                RDF.GetLiteral("true"), true))
          this.setAttribute("closed", "true");

        contacts.forEach(this.addContact, this);

        let name;
        if (this.tag.id != -1)
          name = this.tag.name;
        else {
          name = Services.strings.createBundle("chrome://instantbird/locale/instantbird.properties")
                         .GetStringFromName("group.otherContacts.name");
        }
        this.displayName = name;
        this._updateGroupLabel();
        this.tag.addObserver(this);
        return true;
      ]]>
      </body>
     </method>

     <property name="showOffline">
       <getter>
         <![CDATA[
           return this._showOffline;
         ]]>
       </getter>
       <setter>
         <![CDATA[
           this._showOffline = val;
           if (val) {
             this.tag.getContacts().filter(function (c) !c.online)
                                   .forEach(this.addContact, this);
             this._updateGroupLabel();
           }
           else {
             this.contacts.filter(function (b) !b.contact.online)
                          .forEach(function (b) {
               b.finishRemoveNode();
               b.parentNode.removeChild(b);
             }, this);
           }
           return val;
         ]]>
       </setter>
     </property>

     <!-- nsIObserver implementation -->
     <method name="observe">
       <parameter name="aSubject"/>
       <parameter name="aTopic"/>
       <parameter name="aData"/>
       <body>
       <![CDATA[
         if (this.showOffline && (aTopic == "contact-added" ||
                                  aTopic == "contact-moved-in") ||
             !this.showOffline && aSubject.online &&
             (aTopic == "contact-availability-changed" ||
              aTopic == "contact-added" ||
              aTopic == "contact-moved-in")) {
           this.addContact(aSubject);
           this._updateGroupLabel();
           return;
         }

         if (aTopic == "contact-no-longer-dummy") {
           let oldId = parseInt(aData);
           if (this.contactsById.hasOwnProperty(oldId)) {
             let contact = this.contactsById[oldId];
             delete this.contactsById[oldId];
             this.contactsById[contact.contact.id] = contact;
           }
           return;
         }

         if (aTopic == "tag-hidden") {
           this.setAttribute("collapsing", "true");
           this.addEventListener("transitionend", this._transitionEnd, true);
           for each (let contact in this.contacts) {
             contact.state = "collapsing";
             contact.finishRemoveNode();
           }
           return;
         }
       ]]>
       </body>
     </method>

     <method name="addContact">
      <parameter name="aContact"/>
      <body>
      <![CDATA[
        if (this.contactsById.hasOwnProperty(aContact.id))
          return;

        var contactElt = document.createElement("contact");
        if (this.hasAttribute("closed"))
          contactElt.setAttribute("collapsed", "true");

        var last = this;
        if (this.contacts.length)
          last = this.contacts[this.contacts.length - 1];

        this.parentNode.insertBefore(contactElt, last.nextSibling);
        contactElt.build(aContact, this);
        this.contacts.push(contactElt);
        this.contactsById[aContact.id] = contactElt;

        if (this.hasAttribute("collapsing"))
          this.removeAttribute("collapsing");
      ]]>
      </body>
     </method>

     <method name="removeContact">
      <parameter name="aContact"/>
      <body>
      <![CDATA[
        var i = this.contacts.indexOf(aContact);
        if (i == -1)
          throw "Removing a contact that doesn't exist?";

        // create a new array to remove without breaking for each loops.
        this.contacts = this.contacts.filter(function(c) c !== aContact);
        delete this.contactsById[aContact.contact.id];

        // Check if some contacts remain in the group, if empty remove it
        if (!this.contacts.length) {
          this.setAttribute("collapsing", "true");
          this.addEventListener("transitionend", this._transitionEnd, true);
        }
        else
          this._updateGroupLabel();
      ]]>
      </body>
     </method>

     <method name="_transitionEnd">
      <body>
      <![CDATA[
        if (!this.hasAttribute("collapsing"))
          return;
        this.tag.removeObserver(this);
        this.parentNode.removeChild(this);
      ]]>
      </body>
     </method>

     <method name="hide">
      <body>
      <![CDATA[
        const promptPrefName = "messenger.buddies.hideTagPrompt";
        if (Services.prefs.getBoolPref(promptPrefName)) {
          let bundle =
            Services.strings.createBundle("chrome://instantbird/locale/instantbird.properties");
          let name = this.displayName;
          let promptTitle =
            bundle.formatStringFromName("group.hidePrompt.title", [name], 1);
          let promptMessage =
            bundle.formatStringFromName("group.hidePrompt.message", [name], 1);
          let hideButton = bundle.GetStringFromName("group.hidePrompt.button");
          let promptCheckbox =
            bundle.GetStringFromName("group.hidePrompt.checkbox");
          let prompts = Services.prompt;
          let checkbox = {};
          let flags = prompts.BUTTON_TITLE_IS_STRING * prompts.BUTTON_POS_0 +
                      prompts.BUTTON_TITLE_CANCEL * prompts.BUTTON_POS_1 +
                      prompts.BUTTON_POS_0_DEFAULT;
          if (prompts.confirmEx(window, promptTitle, promptMessage, flags,
                                hideButton, null, null, promptCheckbox, checkbox))
            return;

          if (!checkbox.value)
            Services.prefs.setBoolPref(promptPrefName, false);
        }
        Services.tags.hideTag(this.tag);
      ]]>
      </body>
     </method>

     <method name="_updateClosedState">
      <parameter name="aClosed"/>
      <body>
      <![CDATA[
        for each (let contact in this.contacts)
          contact.collapsed = aClosed;
      ]]>
      </body>
     </method>

     <method name="close">
      <body>
      <![CDATA[
        if (this.hasAttribute("closed")) {
          this.removeAttribute("closed");
          this._updateClosedState(false);
        }
        else {
          this.setAttribute("closed", "true");
          this._updateClosedState(true);
        }

        this._updateGroupLabel();
      ]]>
      </body>
     </method>

     <field name="displayName"></field>
     <method name="_updateGroupLabel">
      <body>
      <![CDATA[
        let name = this.displayName;
        if (this.hasAttribute("closed"))
          name += " (" + this.contacts.length + ")";

        this.setAttribute("name", name);
      ]]>
      </body>
     </method>

     <method name="keyPress">
      <parameter name="aEvent"/>
      <body>
      <![CDATA[
        switch (aEvent.keyCode) {
          case aEvent.DOM_VK_RETURN:
          case aEvent.DOM_VK_ENTER:
            this.close();
            break;

          case aEvent.DOM_VK_LEFT:
            if (!this.hasAttribute("closed"))
              this.close();
            break;

          case aEvent.DOM_VK_RIGHT:
            if (this.hasAttribute("closed"))
              this.close();
            break;
        }
      ]]>
      </body>
     </method>
    </implementation>
    <handlers>
     <handler event="click">
     <![CDATA[
        // Check if there was 1 click on the image or 2 clicks on the label
        if ((event.detail == 1 && event.originalTarget.localName == "image") ||
            (event.detail == 2 && event.originalTarget.localName == "label"))
          this.close();

        if (event.originalTarget.localName == "button")
          this.hide();
     ]]>
     </handler>
    </handlers>
  </binding>
</bindings>
