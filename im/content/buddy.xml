<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Instantbird messenging client, released
   - 2007.
   -
   - The Initial Developer of the Original Code is
   - Florian QUEZE <florian@instantbird.org>.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings>

<bindings id="buddyBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="buddy" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
    <content align="center">
      <xul:stack class="prplBuddyIcon" mousethrough="always">
        <xul:image xbl:inherits="src=iconPrpl" class="protoIcon"/>
        <xul:image class="statusIcon"/>
      </xul:stack>
      <xul:label crop="end" flex="1" mousethrough="always"
                 anonid="displayname" class="buddyDisplayName"
                 xbl:inherits="value=displayname"/>
      <xul:label crop="end" flex="100000" mousethrough="always"
                 anonid="statusText" class="buddyStatusText"
                 xbl:inherits="value=statusText"/>
    </content>
    <implementation implements="nsIObserver">

     <destructor>
      <![CDATA[
        if (this.buddy) {
          this.buddy.removeObserver(this);
          delete this.buddy;
        }
      ]]>
     </destructor>

     <method name="build">
      <parameter name="aBuddy"/>
      <parameter name="aContact"/>
      <body>
      <![CDATA[
        this.buddy = aBuddy;
        this.contact = aContact;
        this.buddy.addObserver(this);

        this.state = "showing";
        this.addEventListener("transitionend", this._transitionEnd, true);
      ]]>
      </body>
     </method>

     <property name="displayName"
               onget="return this.buddy.displayName;"/>

     <property name="state"
               onget="return this.getAttribute('state');"
               onset="this.setAttribute('state', val); return val;"/>

     <!-- nsIObserver implementation -->
     <method name="observe">
       <parameter name="aSubject"/>
       <parameter name="aTopic"/>
       <parameter name="aData"/>
       <body>
       <![CDATA[
         if (aTopic == "buddy-display-name-changed" ||
             aTopic == "buddy-status-changed") {
           this.update();
           return;
         }

         if (aTopic == "buddy-removed" ||
             aTopic == "buddy-moved-out-of-contact")
           this.removeNode();
       ]]>
       </body>
     </method>

     <method name="update">
      <body>
      <![CDATA[
        this.setAttribute("displayname", this.buddy.displayName);

        let statusText = this.buddy.statusText;
        if (statusText)
          statusText = " - " + statusText;
        this.setAttribute("statusText", statusText);
        this.setAttribute("status", Status.toAttribute(this.buddy.statusType));

        let proto = this.buddy.protocol;
        this.setAttribute("iconPrpl", proto.iconBaseURI + "icon.png");
      ]]>
      </body>
     </method>

     <method name="_transitionEnd">
      <body>
      <![CDATA[
        let state = this.state;
        if (state == "showing") {
          this.update();
          this.state = "visible";
        }
        else if (state == "collapsing")
          this.parentNode.removeChild(this);
      ]]>
      </body>
     </method>

     <method name="removeNode">
      <body>
      <![CDATA[
        this.buddy.removeObserver(this);
        delete this.buddy;
        if (this.state == "visible") // FIXME check the heigh instead
          this.state = "collapsing";
        else
          this.parentNode.removeChild(this);
      ]]>
      </body>
     </method>

     <method name="remove">
      <body>
      <![CDATA[
        this.buddy.remove();
      ]]>
      </body>
     </method>

     <method name="canOpenConversation">
      <body>
       <![CDATA[
         return this.buddy.canSendMessage;
       ]]>
      </body>
     </method>

     <method name="openConversation">
      <body>
       <![CDATA[
         if (!("Conversations" in window))
           Components.utils.import("resource:///modules/imWindows.jsm");
         Conversations.focusConversation(this.buddy.createConversation());
       ]]>
      </body>
     </method>

     <method name="_DragOk">
      <parameter name="aEvent"/>
      <body>
      <![CDATA[
        aEvent.preventDefault();
        if (this.hasAttribute("droptarget"))
          return;
        if ("_droptarget" in window)
          window._droptarget.removeAttribute("droptarget");
        window._droptarget = this;
        this.setAttribute("droptarget", "true");
      ]]>
      </body>
     </method>
     <method name="_DragLeave">
      <body>
      <![CDATA[
        if (!this.hasAttribute("droptarget"))
          return;
        delete window._droptarget;
        this.removeAttribute("droptarget");
      ]]>
      </body>
     </method>
     <method name="_checkDrag">
      <parameter name="aEvent"/>
      <body>
      <![CDATA[
        if (this.state != "visible")
          return;

        let dt = aEvent.dataTransfer;
        if (dt.types.contains("application/x-ib-contact")) {
          if (dt.getData("application/x-ib-contact") != this.buddy.contact.id)
            this._DragOk(aEvent);
          aEvent.stopPropagation();
        }
        else if (dt.types.contains("application/x-ib-buddy")) {
          if (dt.getData("application/x-ib-buddy") != this.buddy.id)
            this._DragOk(aEvent);
          aEvent.stopPropagation();
        }
      ]]>
      </body>
     </method>
    </implementation>
    <handlers>
     <handler event="click" clickcount="2">
       <![CDATA[
         if (canOpenConversation())
           openConversation();
         event.stopPropagation();
       ]]>
     </handler>

     <handler event="dragstart">
       <![CDATA[
         if (this.state != "visible")
           return;

         event.dataTransfer.setData("application/x-ib-buddy",
                                    this.buddy.id);
         event.stopPropagation();
       ]]>
     </handler>
     <handler event="drop">
       <![CDATA[
         let contact = this.buddy.contact;
         let dt = event.dataTransfer;
         if (dt.types.contains("application/x-ib-contact")) {
           let id = dt.getData("application/x-ib-contact");
           contact.mergeContact(Services.contacts.getContactById(id));
         }
         else if (dt.types.contains("application/x-ib-buddy")) {
           let id = dt.getData("application/x-ib-buddy");
           let from = Services.contacts.getBuddyById(id);
           if (from.contact.id != contact.id)
             contact.adoptBuddy(from);
           contact.moveBuddyBefore(from, this.buddy);
         }
         else
           throw "Invalid drop on buddy!";
         event.stopPropagation();
         this._DragLeave();
       ]]>
     </handler>
     <handler event="dragenter">
       <![CDATA[
         this._checkDrag(event);
       ]]>
     </handler>
     <handler event="dragover">
       <![CDATA[
         this._checkDrag(event);
       ]]>
     </handler>
     <handler event="dragleave">
       <![CDATA[
         this._DragLeave();
       ]]>
     </handler>
    </handlers>
  </binding>
</bindings>
