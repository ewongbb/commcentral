/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MinimizeToTray Revived components.
 *
 * The Initial Developer of the Original Code is Nils Maier
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Nils Maier <MaierMan@web.de>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDOMWindow;

[scriptable, uuid(e17d921c-4b3a-47b2-8283-cab425cc1a0c)]
interface trayITrayIcon : nsISupports {

  /**
   * Associated DOM window
   */
  [readonly] attribute nsIDOMWindow window;

    /**
     * Window is minimized to tray
     */
    [readonly] attribute boolean isMinimized;

  /**
     * Indicates whether icon will be closed if window is restored
   */
  attribute boolean closeOnRestore;

  /**
   * Minimizes the window
   */
  void minimize();

  /**
   * Restores the window
   */
  void restore();

  /**
   * Closes the tray icon, restoring the window in the process
   */
  void close();
};

[scriptable, uuid(8fbd1a20-7abf-11dd-ad8b-0800200c9a66)]
interface trayITrayService : nsISupports {

  /**
   * Creates a tray icon for window
   */
  trayITrayIcon createIcon(in nsIDOMWindow window,  [optional] in boolean aCloseOnRestore);

  /**
   * Restores all windows from the tray
   */
  void restoreAll();

  /**
   * Watch a window, and if minimized send to tray
   */
  void watchMinimize(in nsIDOMWindow window);

  /**
   * unwatch a window again
   */
  void unwatchMinimize(in nsIDOMWindow window);

  /**
   * is the window watched
   */
  PRBool isWatchedWindow(in nsIDOMWindow window);

  /**
   * minimizes a window to the tray
   */
  void minimize(in nsIDOMWindow aWindow, [optional] in boolean aCloseOnRestore);

  /**
   * Restores a window from the tray
   */
  void restore(in nsIDOMWindow aWindow);
};
